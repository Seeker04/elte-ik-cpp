Programozási nyelvek I. C++ EA+GY. (A/B/C)
Csoport: 4

Oktató: Zahorán Barnabás
E-mail: zahoranb [at] protonmail [dot] com
Időpont: Szerda 8:15 - 9:45
Helyszín: Microsoft Teams meeting "C++ gyakorlat (4-es csoport)"

Számonkérés: Félév végén beadandó írása (~1 hét), majd szóbeli vizsga Teams-en:
elmélet, beadandó védés, esetleg minimális kód módosítás, ha kéri az oktató

----------------------------------------

Gyakorlati segédanyagok: https://github.com/Seeker04/elte-ik-cpp
(Főleg: fogalomtar.txt, fogalomtar_kidolgozott.txt)

Előadás diák/példakódok: https://patakino.web.elte.hu/pny1/

Egyéb hasznos források készüléshez:
 - https://github.com/Szelethus/ELTE-IK-CPP (különösképp: cpp_book.pdf)
 - https://www.cplusplus.com/doc/tutorial/ (tömör, lényegretörő tutorial)
 - https://www.cprogramming.com/tutorial/c++-tutorial.html (itt is sok hasznos/érdekes cikk van)

Standard library dokumentáció:
  https://www.cplusplus.com/reference/
  (Főképp: Containers rész, miscellaneous/algorithm,string,...)

----------------------------------------

Fordítás: Ubuntu 20.04 LTS, 9.3.0 gcc + megadott flag-ek
  - g++ -fsanitize=address,leak,undefined -O3 -Wall -Wextra -Werror main.cpp
      Ha error/warning nélkül lefordul és futásnál sem panaszkodik a sanitizer,
      akkor OK
  - clang-tidy main.cpp --
      Ha nem ír hibát, akkor OK
  - valgrind ./a.out
      Ha ilyet ír, és más hibát sem ír, akkor OK:
      total heap usage: N allocs, N frees
      All heap blocks were freed -- no leaks are possible
    Megj.: a valgrind nem szereti a sanitizer-t, ezért
    valgrind-os futtatás előtt -fsanitize nélkül fordítsátok!

A toolchain-hez:

Ubuntu iso: https://ubuntu.com/download/desktop
VirtualBox: https://www.virtualbox.org/wiki/Downloads
VM letrehozasa -> Ubuntu iso import -> Ubuntu install

Vagy még egyszerűbb:
Windows store-ból is fel lehet tenni
https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6?activetab=pivot:overviewtab

apt-get update
apt-get install clang-tidy
apt-get install valgrind
(gcc-nek alapból kell lennie, de a verziója ezzel ellenőrizhető:
g++ --version, ha 9.3.0 vagy annál magasabb, akkor OK)

A beadandókat standard C++-ban (c++98) kell megírni:
 - A kód ne tartalmazzon standardon kívül eső compiler extension-öket (pl. pragma once)
   Ezt a -pedantic fordítási kapcsolóval lehet ellenőriztetni
 - Az előadáson/gyakorlatokon bemutatott nyelvi konstrukciókat használjuk,
   modern C++ feature-ök használata (pl. ranged-based for loop, smart pointer, lambdák)
   nem tiltott, de ha használjátok, őket is meg kell tudni magyarázni, illetve
   az oktató kérheti, hogy írjátok át a megoldásotokat a vele ekvivalens régi (c++98)
   konstrukciókra
   Példa:
     std::map<int, std::string> m;
     ...
     auto it = m.cbegin();  // ha ezt írjátok, tudni kell, hogy ezzel ekvivalens:
     std::map<int, std::string>::const_iterator it = m.cbegin();
     // Mivel úgyis bele fog kérdezni a vizsgáztató és át kell tudni írni a
     // vizsgán, ezért én azt javaslom, eleve a második verziót írjátok a beadandóba

